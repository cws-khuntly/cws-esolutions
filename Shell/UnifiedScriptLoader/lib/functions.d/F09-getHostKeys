#===  FUNCTION  ===============================================================
#          NAME:  getHostKeys
#   DESCRIPTION:  Obtains and stores the public key for a remote SSH node
#    PARAMETERS:  Target host to obtain keys for
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function getHostKeys
{
    trap 'set +v; set +x' INT TERM EXIT;

    trap '[ -f "${TEMPFILE}" ] && rm -rf "${TEMPFILE}"; set +v; set +x' INT TERM EXIT;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set -x;
    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set -v;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v;
    typeset METHOD_NAME="${CNAME}#getHostKeys";
    typeset -i RETURN_CODE=0;

    if [ ${#} -eq 0 ]
    then
        typeset RETURN_CODE=3;

        echo -n "getHostKeys - Obtain SSH host keys for a provided server.\n";
        echo -n "Usage: getHostKeys [ <host> ]
                 -> The hostname to obtain SSH host keys for.\n";

        IFS=${CURR_IFS};
        [ -f "${TEMPFILE}" ] && rm -rf "${TEMPFILE}";

        unset VALIDATE_REPLACE;
        unset TEMPFILE;
        unset MOVED_ENTRIES;
        unset TEMP_ENTRIES;
        unset LINES;
        unset KEYTYPE;
        unset HOST_KEY;
        unset ENTRY;
        unset KEY_COUNT;
        unset CURRENT_ENTRIES;
        unset HOST_DSA_KEY;
        unset HOST_RSA_KEY;
        unset CURR_IFS;
        unset METHOD_NAME;

        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set +x;
        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +v;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

        return ${RETURN_CODE};
    fi

    validateServerAvailability "${TARGET_HOST}" 22;
    typeset -i RET_CODE=${?};

    typeset METHOD_NAME="${CNAME}#setupNewServer";

    if [ -z "${RET_CODE}" ] || [ ${RET_CODE} -ne 0 ]
    then
        RETURN_CODE=1;

        echo "Target host does not appear to be available." >&2;

        IFS=${CURR_IFS};
        [ -f "${TEMPFILE}" ] && rm -rf "${TEMPFILE}";

        unset VALIDATE_REPLACE;
        unset TEMPFILE;
        unset MOVED_ENTRIES;
        unset TEMP_ENTRIES;
        unset LINES;
        unset KEYTYPE;
        unset HOST_KEY;
        unset ENTRY;
        unset KEY_COUNT;
        unset CURRENT_ENTRIES;
        unset HOST_DSA_KEY;
        unset HOST_RSA_KEY;
        unset CURR_IFS;
        unset METHOD_NAME;

        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set +x;
        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +v;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

        return ${RETURN_CODE};
    fi

    [ ! -f ${HOME}/.ssh/known_hosts ] && touch ${HOME}/.ssh/known_hosts;
    typeset CURR_IFS="${IFS}"
    typeset HOST_ENTRY="$(ssh-keyscan ${1} 2>&1 | head -1)";
    typeset HOST_RSA_KEY="$(ssh-keyscan -t rsa ${1} 2>/dev/null)";
    typeset HOST_DSA_KEY="$(ssh-keyscan -t dsa ${1} 2>/dev/null)";
    typeset HOST_ECDSA_KEY="$(ssh-keyscan -t ecdsa ${1} 2>/dev/null)";
    typeset CURRENT_ENTRIES=$(ssh-keygen -H -F ${1} | sed -e "/Host ${1}/c\^");

    if [ -z "${HOST_RSA_KEY}" ] && [ -z "${HOST_DSA_KEY}" ] && [ -z "${HOST_ECDSA_KEY}" ]
    then
        RETURN_CODE=1;

        echo "Host ${1} does not appear to house an RSA, DSA, or ECDSA key. Cannot continue.";

        IFS=${CURR_IFS};
        [ -f "${TEMPFILE}" ] && rm -rf "${TEMPFILE}";

        unset VALIDATE_REPLACE;
        unset TEMPFILE;
        unset MOVED_ENTRIES;
        unset TEMP_ENTRIES;
        unset LINES;
        unset KEYTYPE;
        unset HOST_KEY;
        unset ENTRY;
        unset KEY_COUNT;
        unset CURRENT_ENTRIES;
        unset HOST_DSA_KEY;
        unset HOST_RSA_KEY;
        unset CURR_IFS;
        unset METHOD_NAME;

        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set +x;
        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +v;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

        return ${RETURN_CODE};
    fi

    if [ -z "${CURRENT_ENTRIES}" ]
    then
        ## add them in here
        echo "${HOST_ENTRY}" >> ${HOME}/.ssh/known_hosts;
        [ ! -z "${HOST_RSA_KEY}" ] && echo "${HOST_RSA_KEY}" >> ${HOME}/.ssh/known_hosts || echo "WARN: No RSA key was found for host ${1}";
        [ ! -z "${HOST_DSA_KEY}" ] && echo "${HOST_DSA_KEY}" >> ${HOME}/.ssh/known_hosts || echo "WARN: No DSA key was found for host ${1}";
        [ ! -z "${HOST_ECDSA_KEY}" ] && echo "${HOST_ECDSA_KEY}" >> ${HOME}/.ssh/known_hosts || echo "WARN: No ECDSA key was found for host ${1}";
    else
        typeset TEMPFILE=$(mktemp);
        typeset KEY_COUNT="$(ssh-keygen -H -F ${1} | wc -l)";

        case ${KEY_COUNT} in
            1|2)
                ## make sure they match, if they dont, remove them
                typeset IFS="^";

                for ENTRY in ${CURRENT_ENTRIES}
                do
                    [ -z "${ENTRY}" ] && continue;

                    typeset HOST_KEY=$(tr '\n' ' ' <<< ${ENTRY} | sed -e 's/^ *//g;s/ *$//g;/^ *#/d;s/#.*//');
                    typeset KEYTYPE=$(tr '\n' ' ' <<< ${ENTRY} | awk '{print $2}' | sed -e 's/^ *//g;s/ *$//g;/^ *#/d;s/#.*//');

                    case ${KEYTYPE} in
                        ssh-rsa)
                            [ "${HOST_KEY}" = "${HOST_RSA_KEY}" ] && continue;

                            sed -e "s^${HOST_KEY}^${HOST_RSA_KEY}^" ${HOME}/.ssh/known_hosts > ${TEMPFILE};

                            typeset VALIDATE_REPLACE=$(ssh-keygen -f ${TEMPFILE} -F ${1} | grep "ssh-rsa");

                            if [ ! -z "${VALIDATE_REPLACE}" ]
                            then
                                echo "An error occurred replacing the hostkeys for host ${1} from the known_hosts file. SSH connections may continue, but may not work properly.";

                                continue;
                            else
                                mv ${TEMPFILE} ${HOME}/.ssh/known_hosts;

                                typeset MOVED_ENTRIES=$(ssh-keygen -F ${1} | grep "ssh-rsa");

                                if [ ! -z "${MOVED_ENTRIES}" ]
                                then
                                    echo "An error occurred replacing the hostkeys for host ${1} from the known_hosts file. SSH connections may continue, but may not work properly.";
                                fi
                            fi
                            ;;
                        ssh-dss)
                            [ "${HOST_KEY}" = "${HOST_DSA_KEY}" ] && continue;

                            sed -e "s^${HOST_KEY}^${HOST_DSA_KEY}^" ${HOME}/.ssh/known_hosts > ${TEMPFILE};

                            typeset VALIDATE_REPLACE=$(ssh-keygen -f ${TEMPFILE} -F ${1} | grep "ssh-dss");

                            if [ ! -z "${VALIDATE_REPLACE}" ]
                            then
                                echo "An error occurred replacing the hostkeys for host ${1} from the known_hosts file. SSH connections may continue, but may not work properly.";

                                continue;
                            else
                                mv ${TEMPFILE} ${HOME}/.ssh/known_hosts;

                                typeset MOVED_ENTRIES=$(ssh-keygen -F ${1} | grep "ssh-rsa");

                                if [ ! -z "${MOVED_ENTRIES}" ]
                                then
                                    echo "An error occurred replacing the hostkeys for host ${1} from the known_hosts file. SSH connections may continue, but may not work properly.";
                                fi
                            fi
                            ;;
                        ecdsa*)
                            [ "${HOST_KEY}" = "${HOST_ECDSA_KEY}" ] && continue;

                            sed -e "s^${HOST_KEY}^${HOST_ECDSA_KEY}^" ${HOME}/.ssh/known_hosts > ${TEMPFILE};

                            typeset VALIDATE_REPLACE=$(ssh-keygen -f ${TEMPFILE} -F ${1} | grep "ecdsa");

                            if [ ! -z "${VALIDATE_REPLACE}" ]
                            then
                                echo "An error occurred replacing the hostkeys for host ${1} from the known_hosts file. SSH connections may continue, but may not work properly.";

                                continue;
                            else
                                mv ${TEMPFILE} ${HOME}/.ssh/known_hosts;

                                typeset MOVED_ENTRIES=$(ssh-keygen -F ${1} | grep "ssh-rsa");

                                if [ ! -z "${MOVED_ENTRIES}" ]
                                then
                                    echo "An error occurred replacing the hostkeys for host ${1} from the known_hosts file. SSH connections may continue, but may not work properly.";
                                fi
                            fi
                            ;;
                    esac
                done
                ;;
            *)
                typeset LINES=$(ssh-keygen -H -F ${1} | grep "#" | cut -d ":" -f 2 | awk '{print $2}' | tr "\n" " " | sed -e "s/ /d;/g");

                ## remove the comment and all associated keys
                sed -e "/# ${1}/d;/${1}/d;${LINES}" ${HOME}/.ssh/known_hosts > ${TEMPFILE};

                typeset TEMP_ENTRIES=$(ssh-keygen -f ${TEMPFILE} -F ${1});

                if [ ! -z "${TEMP_ENTRIES}" ]
                then
                    echo "An error occurred removing the hostkeys for host ${1} from the known_hosts file. SSH connections may continue, but may not work properly.";

                    continue;
                else
                    mv ${TEMPFILE} ${HOME}/.ssh/known_hosts;

                    typeset MOVED_ENTRIES=$(ssh-keygen -H -F ${1});

                    if [ ! -z "${MOVED_ENTRIES}" ]
                    then
                        echo "An error occurred removing the hostkeys for host ${1} from the known_hosts file. SSH connections may continue, but may not work properly.";
                    else
                        echo "${HOST_ENTRY}" >> ${HOME}/.ssh/known_hosts;
                        [ ! -z "${HOST_RSA_KEY}" ] && echo "${HOST_RSA_KEY}" >> ${HOME}/.ssh/known_hosts || echo "WARN: No RSA key was found for host ${1}";
                        [ ! -z "${HOST_DSA_KEY}" ] && echo "${HOST_DSA_KEY}" >> ${HOME}/.ssh/known_hosts || echo "WARN: No DSA key was found for host ${1}";
                        [ ! -z "${HOST_ECDSA_KEY}" ] && echo "${HOST_ECDSA_KEY}" >> ${HOME}/.ssh/known_hosts || echo "WARN: No ECDSA key was found for host ${1}";
                    fi
                fi
                ;;
        esac
    fi

    IFS=${CURR_IFS};
    [ -f "${TEMPFILE}" ] && rm -rf "${TEMPFILE}";

    unset VALIDATE_REPLACE;
    unset TEMPFILE;
    unset MOVED_ENTRIES;
    unset TEMP_ENTRIES;
    unset LINES;
    unset KEYTYPE;
    unset HOST_KEY;
    unset ENTRY;
    unset KEY_COUNT;
    unset CURRENT_ENTRIES;
    unset HOST_DSA_KEY;
    unset HOST_RSA_KEY;
    unset CURR_IFS;
    unset METHOD_NAME;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set +x;
    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +v;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    return ${RETURN_CODE};
}
