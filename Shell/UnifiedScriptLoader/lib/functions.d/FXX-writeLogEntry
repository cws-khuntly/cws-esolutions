#===  FUNCTION  ===============================================================
#          NAME:  cleanLogArchive
#   DESCRIPTION:  Cleans up the archived log directory
#    PARAMETERS:  Archive Directory, Logfile Name, Retention Time
#       RETURNS:  0 regardless of result.
#==============================================================================
function cleanLogArchive
{
    trap 'set +v; set +x' INT TERM EXIT;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set -x;
    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set -v;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v;

    [ ! -d "${ARCHIVE_LOG_ROOT}" ] && return 0;

    for ARCHIVED_FILE in $(find "${ARCHIVE_LOG_ROOT}" -type f -name \*.log\* -ctime +"${LOG_RETENTION_PERIOD}")
    do
        [ ! -z "${ARCHIVED_FILE}" ] && [ -f "${ARCHIVED_FILE}" ] && rm -rf "${ARCHIVED_FILE}";
    done

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set +x;
    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +v;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    return 0;
}

#===  FUNCTION  ===============================================================
#          NAME:  rotateLog
#   DESCRIPTION:  Rotates log files based on size or time.
#    PARAMETERS:  The log file name to take action against
#       RETURNS:  0 regardless of result.
#==============================================================================
function rotateLogs
{
    trap 'set +v; set +x' INT TERM EXIT;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set -x;
    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set -v;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v;

    [ ! -f "${LOG_ROOT}/${1}" ] && return 0;

    if [ $(( $(date +"%s") - $(stat -L --format %Y "${LOG_ROOT}/${1}") > $(echo "${ROLLOVER_PERIOD} * 60 * 60" | bc) )) -eq 1 ]
    then
        if [ -f "${LOG_ROOT}/${1}.${LOG_RETENTION_PERIOD}" ]
        then
            [ "${ARCHIVE_ENABLED}" ] && mv "${LOG_ROOT}/${1}.${LOG_RETENTION_PERIOD}" "${ARCHIVE_LOG_ROOT}" || rm -f "${LOG_ROOT}/${1}.${LOG_RETENTION_PERIOD}";
        fi

        ## rotate logs
        A=${LOG_RETENTION_PERIOD};

        while [[ ${A} -ne 0 ]]
        do
            [ -f "${LOG_ROOT}/${1}".${A} ] && mv "${LOG_ROOT}/${1}".${A} "${LOG_ROOT}/${1}".$(( A + 1 ));

            (( A -= 1 ))
        done

        mv "${LOG_ROOT}/${1}" "${LOG_ROOT}/${1}".1;
        touch "${LOG_ROOT}/${1}";
    fi

    if [ $(/usr/bin/env stat -c %s "${LOG_ROOT}/${1}") -gt $(echo "${FILE_SIZE_LIMIT} * 1024" | bc) ]
    then
        if [ -f "${LOG_ROOT}/${1}.${LOG_RETENTION_PERIOD}" ]
        then
            [ "${ARCHIVE_ENABLED}" ] && mv "${LOG_ROOT}/${1}.${LOG_RETENTION_PERIOD}" "${ARCHIVE_LOG_ROOT}" || rm -f "${LOG_ROOT}/${1}.${LOG_RETENTION_PERIOD}";
        fi

        ## rotate logs
        A=${LOG_RETENTION_PERIOD};

        while [[ ${A} -ne 0 ]]
        do
            [ -f "${LOG_ROOT}/${1}.${A}" ] && mv "${LOG_ROOT}/${1}.${A}" "${LOG_ROOT}/${1}.$(( A + 1 ))";

            (( A -= 1 ))
        done

        mv "${LOG_ROOT}/${1}" "${LOG_ROOT}/${1}.1";
        touch "${LOG_ROOT}/${1}";
    fi

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set +x;
    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +v;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    return 0;
}

#===  FUNCTION  ===============================================================
#          NAME:  writeLogEntry
#   DESCRIPTION:  Cleans up the archived log directory
#    PARAMETERS:  Archive Directory, Logfile Name, Retention Time
#       RETURNS:  0 regardless of result.
#==============================================================================
function writeLogEntry
{
    trap 'set +v; set +x' INT TERM EXIT;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set -x;
    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set -v;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v;
    typeset METHOD_NAME="${CNAME}#writeLogEntry";
    typeset -i RETURN_CODE=0;

    if [ ${#} -eq 0 ]
    then
        typeset RETURN_CODE=3;

        echo "writeLogEntry - Write a log message to stdout/err or to a logfile" >&2;
        echo "Usage: writeLogEntry [ <level> ] [ <method> ] [ <class/script> ] [ <line> ] [ <message> ]
                 -> The level to write for. Supported levels:
                     STDOUT
                     STDERR
                     FATAL
                     ERROR
                     INFO
                     WARN
                     AUDIT
                     DEBUG
                 -> The method calling the logger
                 -> The class/script calling the logger
                 -> The line number making the call
                 -> The message to be printed." >&2;

        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set +x;
        [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +v;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

        return ${RETURN_CODE};
    fi

    ## always do the timestamp first
    typeset TIMESTAMP_OPTS="$(echo "${CONVERSION_PATTERN}" | cut -d "[" -f 2 | cut -d "]" -f 1 | cut -d ":" -f 2- | sed -e '/^ *#/d;s/#.*//')"

    case "${1}" in
        [Ss][Tt][Dd][Oo][Uu][Tt])
            echo "${5}" >&1;
            ;;
        [Ss][Tt][Dd][Ee][Rr][Rr])
            echo "${5}" >&2;
            ;;
        [Ff][Aa][Tt][Aa][Ll]|[Ff])
            rotateLogs "${FATAL_LOG_FILE}"

            typeset RECORDER="$(echo "${CONVERSION_PATTERN}" | sed -e "s^${TIMESTAMP_OPTS}^$(date +"${TIMESTAMP_OPTS}")^;s^%t^${PPID}^;s^%c^${ERROR_LOG_FILE}^;s^%-5p^${1}^;s^%M^${2}^;s^%F^${3}^;s^%L^${4}^;s^%m^${5}^")";
            typeset LOG_FILE="${FATAL_LOG_FILE}";
            ;;
        [Ee][Rr][Rr][Oo][Rr]|[Ee])
            rotateLogs "${ERROR_LOG_FILE}"

            typeset RECORDER="$(echo "${CONVERSION_PATTERN}" | sed -e "s^${TIMESTAMP_OPTS}^$(date +"${TIMESTAMP_OPTS}")^;s^%t^${PPID}^;s^%c^${ERROR_LOG_FILE}^;s^%-5p^${1}^;s^%M^${2}^;s^%F^${3}^;s^%L^${4}^;s^%m^${5}^")";
            typeset LOG_FILE="${ERROR_LOG_FILE}";
            ;;
        [Ww][Aa][Rr][Nn]|[Ww])
            rotateLogs "${WARN_LOG_FILE}"

            typeset RECORDER="$(echo "${CONVERSION_PATTERN}" | sed -e "s^${TIMESTAMP_OPTS}^$(date +"${TIMESTAMP_OPTS}")^;s^%t^${PPID}^;s^%c^${WARN_LOG_FILE}^;s^%-5p^${1}^;s^%M^${2}^;s^%F^${3}^;s^%L^${4}^;s^%m^${5}^")";
            typeset LOG_FILE="${WARN_LOG_FILE}";
            ;;
        [Ii][Nn][Ff][Oo]|{Ii])
            rotateLogs "${INFO_LOG_FILE}"

            typeset RECORDER="$(echo "${CONVERSION_PATTERN}" | sed -e "s^${TIMESTAMP_OPTS}^$(date +"${TIMESTAMP_OPTS}")^;s^%t^${PPID}^;s^%c^${WARN_LOG_FILE}^;s^%-5p^${1}^;s^%M^${2}^;s^%F^${3}^;s^%L^${4}^;s^%m^${5}^")";
            typeset LOG_FILE="${INFO_LOG_FILE}";
            ;;
        [Aa][Uu][Dd][Ii][Tt]|[Aa])
            rotateLogs "${AUDIT_LOG_FILE}"

            typeset RECORDER="$(echo "${CONVERSION_PATTERN}" | sed -e "s^${TIMESTAMP_OPTS}^$(date +"${TIMESTAMP_OPTS}")^;s^%t^${PPID}^;s^%c^${AUDIT_LOG_FILE}^;s^%-5p^${1}^;s^%M^${2}^;s^%F^${3}^;s^%L^${4}^;s^%m^${5}^")";
            typeset LOG_FILE="${AUDIT_LOG_FILE}";
            ;;
        [Dd][Ee][Bb][Uu][Gg]|[Dd])
            rotateLogs "${DEBUG_LOG_FILE}"

            typeset RECORDER="$(echo "${CONVERSION_PATTERN}" | sed -e "s^${TIMESTAMP_OPTS}^$(date +"${TIMESTAMP_OPTS}")^;s^%t^${PPID}^;s^%c^${DEBUG_LOG_FILE}^;s^%-5p^${1}^;s^%M^${2}^;s^%F^${3}^;s^%L^${4}^;s^%m^${5}^")";
            typeset LOG_FILE="${DEBUG_LOG_FILE}";
            ;;
        [Mm][Oo][Nn][Ii][Tt][Oo][Rr]|[Mm])
            rotateLogs "${MONITOR_LOG_FILE}"

            typeset RECORDER="$(echo "${CONVERSION_PATTERN}" | sed -e "s^${TIMESTAMP_OPTS}^$(date +"${TIMESTAMP_OPTS}")^;s^%t^${PPID}^;s^%c^${MONITOR_LOG_FILE}^;s^%-5p^${1}^;s^%M^${2}^;s^%F^${3}^;s^%L^${4}^;s^%m^${5}^")";
            typeset LOG_FILE="${MONITOR_LOG_FILE}";
            ;;
        *)
            rotateLogs "${INFO_LOG_FILE}"

            typeset RECORDER="$(echo "${CONVERSION_PATTERN}" | sed -e "s^${TIMESTAMP_OPTS}^$(date +"${TIMESTAMP_OPTS}")^;s^%t^${PPID}^;s^%c^${INFO_LOG_FILE}^;s^%-5p^${1}^;s^%M^${2}^;s^%F^${3}^;s^%L^${4}^;s^%m^${5}^")";
            typeset LOG_FILE="${INFO_LOG_FILE}";
            ;;
    esac

    [ ! -d "${LOG_ROOT}" ] && mkdir "${LOG_ROOT}";
    [ ! -f "${LOG_ROOT}/${LOG_FILE}" ] && touch "${LOG_ROOT}/${LOG_FILE}";
    [ ! -z "${RECORDER}" ] && [ ! -z "${LOG_FILE}" ] && echo "${RECORDER}" >> "${LOG_ROOT}/${LOG_FILE}";

    unset TIMESTAMP_OPTS;
    unset RECORDER;
    unset LOG_FILE;
    unset METHOD_NAME;

    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "true" ] && set +x;
    [ ! -z "${ENABLE_VERBOSE}" ] && [ "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +v;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

    return ${RETURN_CODE};
}
