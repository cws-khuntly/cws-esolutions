--
-- Definition of table ESOLUTIONSSVC.INSTALLED_APPLICATIONS
--
DROP TABLE IF EXISTS ESOLUTIONSSVC.INSTALLED_APPLICATIONS;
CREATE TABLE ESOLUTIONSSVC.INSTALLED_APPLICATIONS (
    GUID VARCHAR(128) CHARACTER SET UTF8 NOT NULL UNIQUE,
    NAME VARCHAR(45) CHARACTER SET UTF8 NOT NULL,
    VERSION DECIMAL(30, 2) NOT NULL DEFAULT 1.0,
    INSTALLATION_PATH TEXT CHARACTER SET UTF8 NOT NULL, -- where do files get installed to ?
    PACKAGE_LOCATION TEXT CHARACTER SET UTF8, -- package location, either provided or scm'd or whatnot
    PACKAGE_INSTALLER TEXT CHARACTER SET UTF8, -- installer file for standalones
    INSTALLER_OPTIONS TEXT CHARACTER SET UTF8, -- only matters for standalone installs with an installer
    LOGS_DIRECTORY TEXT CHARACTER SET UTF8, -- applies only to web and standalone
    PLATFORM_GUID TEXT CHARACTER SET UTF8 NOT NULL, -- MULTIPLE platforms per app
    APP_ONLINE_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(), -- when did the app get added
    APP_OFFLINE_DATE TIMESTAMP,
    PRIMARY KEY (GUID),
    FULLTEXT KEY IDX_APPLICATIONS (NAME, INSTALLATION_PATH, PACKAGE_LOCATION, PACKAGE_INSTALLER, INSTALLER_OPTIONS)
) ENGINE=MyISAM DEFAULT CHARSET=UTF8 ROW_FORMAT=COMPACT COLLATE UTF8_GENERAL_CI;
COMMIT;

ALTER TABLE ESOLUTIONSSVC.INSTALLED_APPLICATIONS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_GENERAL_CI;
COMMIT;

DELIMITER $$

--
-- Definition of procedure ESOLUTIONSSVC.getApplicationByAttribute
--
DROP PROCEDURE IF EXISTS ESOLUTIONSSVC.getApplicationByAttribute$$
/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE ESOLUTIONSSVC.getApplicationByAttribute(
    IN attributeName VARCHAR(100),
    IN startRow INT
)
BEGIN
    SELECT
        GUID,
        NAME,
    MATCH (NAME, INSTALLATION_PATH, PACKAGE_LOCATION, PACKAGE_INSTALLER, INSTALLER_OPTIONS)
    AGAINST (+attributeName WITH QUERY EXPANSION) AS score
    FROM ESOLUTIONSSVC.INSTALLED_APPLICATIONS
    WHERE MATCH (NAME, INSTALLATION_PATH, PACKAGE_LOCATION, PACKAGE_INSTALLER, INSTALLER_OPTIONS)
    AGAINST (+attributeName IN BOOLEAN MODE)
    AND APP_OFFLINE_DATE IS NULL
    LIMIT startRow, 20;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$
COMMIT$$

--
-- Definition of procedure ESOLUTIONSSVC.insertNewApplication
--
DROP PROCEDURE IF EXISTS ESOLUTIONSSVC.insertNewApplication$$
/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE ESOLUTIONSSVC.insertNewApplication(
    IN appGuid VARCHAR(128),
    IN appName VARCHAR(45),
    IN appVersion DECIMAL(30, 2),
    IN installPath TEXT,
    IN packageLocation TEXT,
    IN packageInstaller TEXT,
    IN installerOptions TEXT,
    IN logsDirectory TEXT,
    IN platformGuid TEXT
)
BEGIN
    INSERT INTO ESOLUTIONSSVC.INSTALLED_APPLICATIONS
    (
        GUID, NAME, VERSION, INSTALLATION_PATH, PACKAGE_LOCATION, PACKAGE_INSTALLER,
        INSTALLER_OPTIONS, LOGS_DIRECTORY, PLATFORM_GUID, APP_ONLINE_DATE
    )
    VALUES
    (
        appGuid, appName, appVersion, installPath, packageLocation, packageInstaller,
        installerOptions, logsDirectory, platformGuid, NOW()
    );

    COMMIT;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$
COMMIT$$

--
-- Definition of procedure ESOLUTIONSSVC.updateApplicationData
--
DROP PROCEDURE IF EXISTS ESOLUTIONSSVC.updateApplicationData$$
/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE ESOLUTIONSSVC.updateApplicationData(
    IN appGuid VARCHAR(128),
    IN appName VARCHAR(45),
    IN appVersion DECIMAL(30, 2),
    IN installPath TEXT,
    IN packageLocation TEXT,
    IN packageInstaller TEXT,
    IN installerOptions TEXT,
    IN logsDirectory TEXT,
    IN platformGuid TEXT
)
BEGIN
    UPDATE ESOLUTIONSSVC.INSTALLED_APPLICATIONS
    SET
        NAME = appName,
        VERSION = appVersion,
        INSTALLATION_PATH = installPath,
        PACKAGE_LOCATION = packageLocation,
        PACKAGE_INSTALLER = packageInstaller,
        INSTALLER_OPTIONS = installerOptions,
        LOGS_DIRECTORY = logsDirectory,
        PLATFORM_GUID = platformGuid
    WHERE GUID = appGuid;

    COMMIT;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$
COMMIT$$

--
-- Definition of procedure ESOLUTIONSSVC.removeApplicationData
--
DROP PROCEDURE IF EXISTS ESOLUTIONSSVC.removeApplicationData$$
/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE ESOLUTIONSSVC.removeApplicationData(
    IN appGuid VARCHAR(128)
)
BEGIN
    UPDATE ESOLUTIONSSVC.INSTALLED_APPLICATIONS
    SET APP_OFFLINE_DATE = CURRENT_TIMESTAMP()
    WHERE GUID = appGuid;

    COMMIT;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$
COMMIT$$

--
-- Definition of procedure ESOLUTIONSSVC.getApplicationData
--
DROP PROCEDURE IF EXISTS ESOLUTIONSSVC.getApplicationData$$
/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE ESOLUTIONSSVC.getApplicationData(
    IN appGuid VARCHAR(128)
)
BEGIN
    SELECT
        GUID,
        NAME,
        VERSION,
        INSTALLATION_PATH,
        PACKAGE_LOCATION,
        PACKAGE_INSTALLER,
        INSTALLER_OPTIONS,
        LOGS_DIRECTORY,
        PLATFORM_GUID
    FROM ESOLUTIONSSVC.INSTALLED_APPLICATIONS
    WHERE GUID = appGuid
    AND APP_OFFLINE_DATE IS NULL;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$
COMMIT$$

--
-- Definition of procedure ESOLUTIONSSVC.listApplications
--
DROP PROCEDURE IF EXISTS ESOLUTIONSSVC.listApplications$$
/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE ESOLUTIONSSVC.listApplications(
    IN startRow INT
)
BEGIN
    SET @counter := (SELECT COUNT(GUID) FROM ESOLUTIONSSVC.INSTALLED_APPLICATIONS WHERE APP_OFFLINE_DATE IS NULL);

    SELECT
        @counter AS COUNTER,
        GUID,
        NAME
    FROM ESOLUTIONSSVC.INSTALLED_APPLICATIONS
    WHERE APP_OFFLINE_DATE IS NULL
    LIMIT startRow, 20;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$
COMMIT$$

DELIMITER ;
COMMIT;
