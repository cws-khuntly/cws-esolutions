/*
 * Copyright (c) 2009 - 2014 CaspersBox Web Services
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cws.esolutions.core.jsch.wrapper;
/*
 * Project: eSolutionsCore
 * Package: com.cws.esolutions.core.utils
 * File: NetworkUtils.java
 *
 * History
 * ----------------------------------------------------------------------------
 * kh05451 @ Jan 4, 2013 3:36:54 PM
 *     Created.
 */
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * Class to route log messages generated by JSch to Apache Commons Logging.
 * 
 * @author mrabbitt
 * @see com.jcraft.jsch.Logger
 */
public class JSchCommonsLogger implements com.jcraft.jsch.Logger
{
    private Logger log = null;

    private static final int INFO_LEVEL_THRESHOLD = com.jcraft.jsch.Logger.INFO;
    private static final int WARN_LEVEL_THRESHOLD = com.jcraft.jsch.Logger.WARN;
    private static final int DEBUG_LEVEL_THRESHOLD = com.jcraft.jsch.Logger.DEBUG;

    /**
     * Default constructor
     */
    public JSchCommonsLogger()
    {
        this(Logger.class.getName());
    }

    /**
     * Constructor with custom category name 
     * 
     * @param logName the category name used by this logger for Apache Commons.
     */
    public JSchCommonsLogger(final String logName)
    {
        this.log = LoggerFactory.getLogger(logName);
    }

    /* (non-Javadoc)
     * @see com.jcraft.jsch.Logger#isEnabled(int)
     */
    @Override
    public final boolean isEnabled(final int level)
    {
        switch (level)
        {
            case DEBUG_LEVEL_THRESHOLD:
                return this.log.isDebugEnabled();
            case INFO_LEVEL_THRESHOLD:
                return this.log.isInfoEnabled();
            case WARN_LEVEL_THRESHOLD:
                return this.log.isWarnEnabled();
            default:
                return this.log.isErrorEnabled();
        }
    }

    /* (non-Javadoc)
     * @see com.jcraft.jsch.Logger#log(int, java.lang.String)
     */
    @Override
    public void log(final int level, final String message)
    {
        switch (level)
        {
            case DEBUG_LEVEL_THRESHOLD:
                this.log.debug(message);

                return;
            case INFO_LEVEL_THRESHOLD:
                this.log.info(message);

                return;
            case WARN_LEVEL_THRESHOLD:
                this.log.warn(message);

                return;
            default:
                this.log.error(message);

                return;
        }
    }
}