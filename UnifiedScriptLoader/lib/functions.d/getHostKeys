#===  FUNCTION  ===============================================================
#          NAME:  getHostKeys
#   DESCRIPTION:  Obtains and stores the public key for a remote SSH node
#    PARAMETERS:  Target host to obtain keys for
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function getHostKeys
{
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set -x;
    typeset METHOD_NAME="${CNAME}#${0}";
    typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided arguments: ${@}";

    if [ ${#} -eq 0 ]
    then
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && trace;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && trace;
        typeset METHOD_NAME="${CNAME}#${0}";
        typeset RETURN_CODE=3;

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> enter";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided arguments: ${@}";

        echo "${0} - Obtain SSH host keys for a provided server.\n";
        echo "Usage: ${0} [ <host> ]
                 -> The hostname to obtain SSH host keys for.\n";

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -f ${TEMPFILE} ] && rm -rf ${TEMPFILE};

        unset MATCH_COUNT;
        unset TEMPFILE;
        unset KEY_COUNT;
        unset LINES;
        unset CURR_IFS;
        unset ENTRY;
        unset KEYTYPE;
        unset CURRENT_HOST_KEY;
        unset METHOD_NAME;

        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && trace;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && trace;

        return ${RETURN_CODE};
    fi

    if [ -z "$(dig +short -t a ${1})" ]
    then
        RETURN_CODE=1;

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> enter";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided arguments: ${@}";

        echo "Host ${1} was not found in DNS.";

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -f ${TEMPFILE} ] && rm -rf ${TEMPFILE};

        unset MATCH_COUNT;
        unset TEMPFILE;
        unset KEY_COUNT;
        unset LINES;
        unset CURR_IFS;
        unset ENTRY;
        unset KEYTYPE;
        unset CURRENT_HOST_KEY;
        unset METHOD_NAME;

        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && trace;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && trace;

        return ${RETURN_CODE};
    fi

    typeset -i MATCH_COUNT=0;
    [ -f ${SSH_KNOWN_HOSTS} ] && KNOWN_HOSTS_FILE="${SSH_KNOWN_HOSTS}" || KNOWN_HOSTS_FILE="${KNOWN_HOSTS_FILE}";

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "MATCH_COUNT -> ${MATCH_COUNT}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "KNOWN_HOSTS_FILE -> ${KNOWN_HOSTS_FILE}";

    if [ ! -z "$(/usr/bin/env ssh-keygen -F ${1})" ]
    then
        typeset TEMPFILE=$(mktemp);
        typeset KEY_COUNT=$(/usr/bin/env ssh-keygen -F ${1} | wc -l);

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "KEY_COUNT -> ${KEY_COUNT}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "TEMPFILE -> ${TEMPFILE}";

        if [ ${KEY_COUNT} -gt 4 ]
        then
            ## remove all keys and start over with this host
            typeset LINES=$(/usr/bin/env ssh-keygen -H -F ${1} | grep "#" | cut -d ":" -f 2 | awk '{print $2}' | tr "\n" " " | sed -e "s/ /d;/g");

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "LINES -> ${LINES}";

            sed -e "/${1}/d;${LINES}" ${KNOWN_HOSTS_FILE} > ${TEMPFILE};

            if [ ! -z "$(grep ${1} ${TEMPFILE})" ]
            then
                ## error occurred removing keys
                RETURN_CODE=1;

                ${LOGGER} "WARN" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "An error occurred removing the hostkeys from the known_hosts file. SSH connections may continue, but may not work properly.";

                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

                [ -f ${TEMPFILE} ] && rm -rf ${TEMPFILE};

                unset MATCH_COUNT;
                unset TEMPFILE;
                unset KEY_COUNT;
                unset LINES;
                unset CURR_IFS;
                unset ENTRY;
                unset KEYTYPE;
                unset CURRENT_HOST_KEY;
                unset METHOD_NAME;

                [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && trace;
                [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && trace;

                return ${RETURN_CODE};
            fi

            mv ${TEMPFILE} ${KNOWN_HOSTS_FILE};

            if [ ! -z "$(ssh-keygen -H -F ${1})" ]
            then
                ## error occurred removing keys
                RETURN_CODE=1;

                ${LOGGER} "WARN" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "An error occurred removing the hostkeys from the known_hosts file. SSH connections may continue, but may not work properly.";

                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

                [ -f ${TEMPFILE} ] && rm -rf ${TEMPFILE};

                unset MATCH_COUNT;
                unset TEMPFILE;
                unset KEY_COUNT;
                unset LINES;
                unset CURR_IFS;
                unset ENTRY;
                unset KEYTYPE;
                unset CURRENT_HOST_KEY;
                unset METHOD_NAME;

                [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && trace;
                [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && trace;

                return ${RETURN_CODE};
            fi
        else
            typeset CURR_IFS="${IFS}";
            typeset IFS="${MODIFIED_IFS}";

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "CURR_IFS -> ${CURR_IFS}";
            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "IFS -> ${IFS}";

            for ENTRY in $(ssh-keygen -H -F ${1} | sed -e "/Host ${1}/c\^")
            do
                [ -z "${ENTRY}" ] && continue;

                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ENTRY -> ${ENTRY}";

                typeset ENTRY=$(echo ${ENTRY} | tr '\n' ' ' | sed -e 's/^ *//g;s/ *$//g;/^ *#/d;s/#.*//');
                typeset KEYTYPE=$(echo ${ENTRY} | tr '\n' ' ' | awk '{print $2}' | sed -e 's/^ *//g;s/ *$//g;/^ *#/d;s/#.*//');
                [ "${KEYTYPE}" = "ssh-dss" ] && typeset HOST_KEY_TYPE="dsa" || typeset HOST_KEY_TYPE="rsa";
                typeset CURRENT_HOST_KEY=$(ssh-keyscan -t ${HOST_KEY_TYPE} ${1} 2>/dev/null);

                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ENTRY -> ${ENTRY}";
                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "KEYTYPE -> ${KEYTYPE}";
                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "HOST_KEY_TYPE -> ${HOST_KEY_TYPE}";
                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "CURRENT_HOST_KEY -> ${CURRENT_HOST_KEY}";

                if [ "${ENTRY}" != "${CURRENT_HOST_KEY}" ]
                then
                    ## replace the existing key with the new
                    sed -e "s^${ENTRY}^${CURRENT_HOST_KEY}^" ${KNOWN_HOSTS_FILE} > ${TEMPFILE};

                    if [ ! -z "$(grep ${ENTRY} ${TEMPFILE})" ]
                    then
                        ${LOGGER} "WARN" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "An error occurred removing the hostkeys from the known_hosts file. SSH connections may continue, but may not work properly.";

                        continue;
                    fi

                    mv ${TEMPFILE} ${KNOWN_HOSTS_FILE};

                    (( MATCH_COUNT += 1 ));
                fi

                (( MATCH_COUNT += 1 ));
            done
        fi
    fi

    if [ ${MATCH_COUNT} -eq 0 ]
    then
        ssh-keyscan -H -T ${SSH_THREAD_TIMEOUT} -t rsa ${1} 1>>${KNOWN_HOSTS_FILE} 2>>${KNOWN_HOSTS_FILE};
        ssh-keyscan -H -T ${SSH_THREAD_TIMEOUT} -t dsa ${1} 1>>${KNOWN_HOSTS_FILE} 2>/dev/null;
    fi

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

    IFS=${CURR_IFS};

    [ -f ${TEMPFILE} ] && rm -rf ${TEMPFILE};

    unset MATCH_COUNT;
    unset TEMPFILE;
    unset KEY_COUNT;
    unset LINES;
    unset CURR_IFS;
    unset ENTRY;
    unset KEYTYPE;
    unset CURRENT_HOST_KEY;
    unset METHOD_NAME;

    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && trace;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && trace;

    return ${RETURN_CODE};
}
