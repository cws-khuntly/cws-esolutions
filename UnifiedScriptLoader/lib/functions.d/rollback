#===  FUNCTION  ===============================================================
#          NAME:  rollback
#   DESCRIPTION:  Roll back a change on an error
#    PARAMETERS:  None
#===========================================================================
function rollback
{
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set -x;
    typeset METHOD_NAME="${CNAME}#${0}";
    typeset RETURN_CODE=0;

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided arguments: ${@}";

    if [ ${#} -lt 3 ]
    then
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set -x;
        typeset METHOD_NAME="${CNAME}#${0}";
        typeset RETURN_CODE=3;

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> enter";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided arguments: ${@}";

        echo -n "${0} - Rolls back a performed modification if an error occurs\n";
        echo -n "Usage: ${0} [ <backup directory> ] [ <backup file> ] [ <original directory> ] [ <original file> ]
                 -> The directory that houses the backup files
                 -> The name of the backup file to restore
                 -> The original directory to restore the backup file into
                 -> The original name of the file being restored\n";

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -d ${TEMPDIR} ] && rm -rf ${TEMPDIR};

        unset ORIGINAL_FILE_CKSUM;
        unset ORIGINAL_FILENAME;
        unset BACKUP_FILE_CKSUM;
        unset FILENAME;
        unset FILE;
        unset DECOMPRESS_COMMAND;
        unset TEMPDIR;
        unset ORIGINAL_DIRECTORY;
        unset BACKUP_FILENAME;
        unset BACKUP_DIRECTORY;
        unset IS_ARCHIVE;
        unset BACKUP_FILE_TYPE;
        unset METHOD_NAME;

        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +x;

        return ${RETURN_CODE};
    fi

    ## need to know what to back out, where to back it out from, and what to replace
    BACKUP_FILE_TYPE=$(cut -d "." -f $(( $(tr -dc "." <<< ${BACKUP_DIRECTORY}/${BACKUP_FILENAME} | wc -c) + 1 )) <<< ${BACKUP_DIRECTORY}/${BACKUP_FILENAME})

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "BACKUP_FILE_TYPE -> ${BACKUP_FILE_TYPE}";

    case ${BACKUP_FILE_TYPE} in
        jar|zip|gz|tar)
            IS_ARCHIVE=${_TRUE};
            ;;
        *)
            IS_ARCHIVE=${_FALSE};
    esac

    typeset BACKUP_DIRECTORY=${1};
    typeset BACKUP_FILENAME=${2};
    typeset ORIGINAL_DIRECTORY=${3};

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "BACKUP_TYPE -> ${BACKUP_TYPE}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "BACKUP_DIRECTORY -> ${BACKUP_DIRECTORY}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "BACKUP_FILENAME -> ${BACKUP_FILENAME}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ORIGINAL_DIRECTORY -> ${ORIGINAL_DIRECTORY}";

    if [ ! -d ${BACKUP_DIRECTORY} ]
    then
        ${LOGGER} "ERROR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided backup directory does not exist. Cannot continue.";

        RETURN_CODE=1;

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -d ${TEMPDIR} ] && rm -rf ${TEMPDIR};

        unset ORIGINAL_FILE_CKSUM;
        unset ORIGINAL_FILENAME;
        unset BACKUP_FILE_CKSUM;
        unset FILENAME;
        unset FILE;
        unset DECOMPRESS_COMMAND;
        unset TEMPDIR;
        unset ORIGINAL_DIRECTORY;
        unset BACKUP_FILENAME;
        unset BACKUP_DIRECTORY;
        unset IS_ARCHIVE;
        unset BACKUP_FILE_TYPE;
        unset METHOD_NAME;

        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +x;

        return ${RETURN_CODE};
    fi

    if [ ! -f ${BACKUP_DIRECTORY}/${BACKUP_FILENAME} ]
    then
        ${LOGGER} "ERROR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided backup file does not exist. Cannot continue.";

        RETURN_CODE=1;

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -d ${TEMPDIR} ] && rm -rf ${TEMPDIR};

        unset ORIGINAL_FILE_CKSUM;
        unset ORIGINAL_FILENAME;
        unset BACKUP_FILE_CKSUM;
        unset FILENAME;
        unset FILE;
        unset DECOMPRESS_COMMAND;
        unset TEMPDIR;
        unset ORIGINAL_DIRECTORY;
        unset BACKUP_FILENAME;
        unset BACKUP_DIRECTORY;
        unset IS_ARCHIVE;
        unset BACKUP_FILE_TYPE;
        unset METHOD_NAME;

        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +x;
        [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +x;

        return ${RETURN_CODE};
    fi

    if [ ! -z ${IS_ARCHIVE} ]
    then
        typeset TEMPDIR=$(mktemp -d);

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "TEMPDIR -> ${TEMPDIR}";

        typeset DECOMPRESS_COMMAND=$(cut -d "." -f $(( $(tr -dc "." <<< ${BACKUP_DIRECTORY}/${BACKUP_FILENAME} | wc -c) + 1 )) <<< ${BACKUP_DIRECTORY}/${BACKUP_FILENAME});

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "DECOMPRESS_COMMAND -> ${DECOMPRESS_COMMAND}";

        case ${DECOMPRESS_COMMAND} in
            jar|zip)
                unzip -d ${TEMPDIR} ${BACKUP_DIRECTORY}/${BACKUP_FILENAME};
                ;;
            gz)
                typeset DECOMPRESS_COMMAND=$(cut -d "." -f $(( $(tr -dc "." <<< ${BACKUP_DIRECTORY}/${BACKUP_FILENAME} | wc -c) + 1 )) <<< ${BACKUP_DIRECTORY}/${BACKUP_FILENAME});
                gzip -dc ${BACKUP_DIRECTORY}/${BACKUP_FILENAME} | (cd ${TEMPDIR}; tar xf -);
                ;;
            tar)
                tar xf ${BACKUP_DIRECTORY}/${BACKUP_FILENAME} -C ${TEMPDIR};
                ;;
        esac

        for FILE in ${TEMPDIR}/*
        do
            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "FILE -> ${FILE}";

            typeset FILENAME=$(/usr/bin/env basename ${FILE});

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "FILENAME -> ${FILENAME}";

            case $(test -d ${FILE} && echo ${?}) in
                0)
                    for TFILE in ${FILE}/*
                    do
                        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "TFILE -> ${TFILE}";

                        typeset TFILENAME=$(/usr/bin/env basename ${TFILE});
                        typeset BASE_DIR=$(cut -d "/" -f $(( $(tr -dc "/" <<< ${TFILE} | wc -c) )) <<< ${TFILE});

                        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "TFILENAME -> ${TFILENAME}";
                        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "BASE_DIR -> ${BASE_DIR}";

                        typeset BACKUP_FILE_CKSUM=$(cksum ${TFILE} | awk '{print $1}');

                        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "BACKUP_FILE_CKSUM -> ${BACKUP_FILE_CKSUM}";

                        if [ -f ${ORIGINAL_DIRECTORY}/${BASE_DIR}/${TFILENAME} ]
                        then
                            ${LOGGER} "INFO" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Original file exists.. Checking for match.";

                            typeset ORIGINAL_FILE_CKSUM=$(cksum ${ORIGINAL_DIRECTORY}/${BASE_DIR}/${TFILENAME} | awk '{print $1}');

                            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ORIGINAL_FILE_CKSUM -> ${ORIGINAL_FILE_CKSUM}";

                            if [ ${BACKUP_FILE_CKSUM} -eq ${ORIGINAL_FILE_CKSUM} ]
                            then
                                ${LOGGER} "INFO" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Original file exists and matches the backup file. No action necessary.";

                                continue;
                            fi
                        fi

                        [ ! -z "${ORIGINAL_DIRECTORY}/${BASE_DIR}/${TFILENAME}" ] && [ -f ${ORIGINAL_DIRECTORY}/${BASE_DIR}/${TFILENAME} ] && rm -rf ${ORIGINAL_DIRECTORY}/${BASE_DIR}/${TFILENAME};

                        cp ${TFILE} ${ORIGINAL_DIRECTORY}/${BASE_DIR}/${TFILENAME};

                        if [ -f ${ORIGINAL_DIRECTORY}/${BASE_DIR}/${TFILENAME} ]
                        then
                            ${LOGGER} "INFO" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Original file exists.. Checking for match.";

                            typeset ORIGINAL_FILE_CKSUM=$(cksum ${ORIGINAL_DIRECTORY}/${BASE_DIR}/${TFILENAME} | awk '{print $1}');

                            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ORIGINAL_FILE_CKSUM -> ${ORIGINAL_FILE_CKSUM}";

                            if [ ${BACKUP_FILE_CKSUM} -ne ${ORIGINAL_FILE_CKSUM} ]
                            then
                                ${LOGGER} "ERROR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "File restoration failed. Please process manually.";
                            fi
                        fi
                    done
                    ;;
                *)
                    typeset BACKUP_FILE_CKSUM=$(cksum ${FILE} | awk '{print $1}');

                    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "BACKUP_FILE_CKSUM -> ${BACKUP_FILE_CKSUM}";

                    if [ -f ${ORIGINAL_DIRECTORY}/${FILENAME} ]
                    then
                        ${LOGGER} "INFO" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Original file exists.. Checking for match.";

                        typeset ORIGINAL_FILE_CKSUM=$(cksum ${ORIGINAL_DIRECTORY}/${FILENAME} | awk '{print $1}');

                        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ORIGINAL_FILE_CKSUM -> ${ORIGINAL_FILE_CKSUM}";

                        if [ ${BACKUP_FILE_CKSUM} -eq ${ORIGINAL_FILE_CKSUM} ]
                        then
                            ${LOGGER} "INFO" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Original file exists and matches the backup file. No action necessary.";

                            continue;
                        fi
                    fi

                    [ ! -z "${ORIGINAL_DIRECTORY}/${FILENAME}" ] && [ -f ${ORIGINAL_DIRECTORY}/${FILENAME} ] && rm -rf ${ORIGINAL_DIRECTORY}/${FILENAME};

                    cp ${FILE} ${ORIGINAL_DIRECTORY}/${FILENAME};

                    if [ -f ${ORIGINAL_DIRECTORY}/${FILENAME} ]
                    then
                        ${LOGGER} "INFO" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Original file exists.. Checking for match.";

                        typeset ORIGINAL_FILE_CKSUM=$(cksum ${ORIGINAL_DIRECTORY}/${FILENAME} | awk '{print $1}');

                        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ORIGINAL_FILE_CKSUM -> ${ORIGINAL_FILE_CKSUM}";

                        if [ ${BACKUP_FILE_CKSUM} -ne ${ORIGINAL_FILE_CKSUM} ]
                        then
                            ${LOGGER} "ERROR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "File restoration failed. Please process manually.";
                        fi
                    fi
                    ;;
            esac
        done
    else
        typeset ORIGINAL_FILENAME=${4};

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ORIGINAL_FILENAME -> ${ORIGINAL_FILENAME}";

        if [ -f ${ORIGINAL_DIRECTORY}/${ORIGINAL_FILENAME} ]
        then
            ${LOGGER} "INFO" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Original file exists.. Checking for match.";

            typeset ORIGINAL_FILE_CKSUM=$(cksum ${ORIGINAL_DIRECTORY}/${ORIGINAL_FILENAME} | awk '{print $1}');

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ORIGINAL_FILE_CKSUM -> ${ORIGINAL_FILE_CKSUM}";

            if [ ${BACKUP_FILE_CKSUM} -eq ${ORIGINAL_FILE_CKSUM} ]
            then
                ${LOGGER} "INFO" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Original file exists and matches the backup file. No action necessary.";

                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
                [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

                [ -d ${TEMPDIR} ] && rm -rf ${TEMPDIR};

                unset ORIGINAL_FILE_CKSUM;
                unset ORIGINAL_FILENAME;
                unset BACKUP_FILE_CKSUM;
                unset FILENAME;
                unset FILE;
                unset DECOMPRESS_COMMAND;
                unset TEMPDIR;
                unset ORIGINAL_DIRECTORY;
                unset BACKUP_FILENAME;
                unset BACKUP_DIRECTORY;
                unset IS_ARCHIVE;
                unset BACKUP_FILE_TYPE;
                unset METHOD_NAME;

                [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +x;
                [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +x;

                return ${RETURN_CODE};
            fi
        fi

        rm -rf ${ORIGINAL_DIRECTORY}/${ORIGINAL_FILENAME};

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Restoring backup copy...";

        cp ${BACKUP_DIRECTORY}/${BACKUP_FILENAME} ${ORIGINAL_DIRECTORY}/${ORIGINAL_FILENAME};

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Restore complete. Validating...";

        typeset ORIGINAL_FILE_CKSUM=$(cksum ${ORIGINAL_DIRECTORY}/${ORIGINAL_FILENAME} | awk '{print $1}');

        [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ORIGINAL_FILE_CKSUM -> ${ORIGINAL_FILE_CKSUM}";

        if [ ${BACKUP_FILE_CKSUM} -eq ${ORIGINAL_FILE_CKSUM} ]
        then
            ${LOGGER} "ERROR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "File restore failed. Please process manually.";

            RETURN_CODE=1;

            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
            [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

            [ -d ${TEMPDIR} ] && rm -rf ${TEMPDIR};

            unset ORIGINAL_FILE_CKSUM;
            unset ORIGINAL_FILENAME;
            unset BACKUP_FILE_CKSUM;
            unset FILENAME;
            unset FILE;
            unset DECOMPRESS_COMMAND;
            unset TEMPDIR;
            unset ORIGINAL_DIRECTORY;
            unset BACKUP_FILENAME;
            unset BACKUP_DIRECTORY;
            unset IS_ARCHIVE;
            unset BACKUP_FILE_TYPE;
            unset METHOD_NAME;

            [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +x;
            [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +x;

            return ${RETURN_CODE};
        fi
    fi

    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" ] && [ "${ENABLE_DEBUG}" = "${_TRUE}" ] && ${LOGGER} "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> exit";

    [ -d ${TEMPDIR} ] && rm -rf ${TEMPDIR};

    unset ORIGINAL_FILE_CKSUM;
    unset ORIGINAL_FILENAME;
    unset BACKUP_FILE_CKSUM;
    unset FILENAME;
    unset FILE;
    unset DECOMPRESS_COMMAND;
    unset TEMPDIR;
    unset ORIGINAL_DIRECTORY;
    unset BACKUP_FILENAME;
    unset BACKUP_DIRECTORY;
    unset IS_ARCHIVE;
    unset BACKUP_FILE_TYPE;
    unset METHOD_NAME;

    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "${_TRUE}" ] && set +x;
    [ ! -z "${ENABLE_TRACE}" ] && [ "${ENABLE_TRACE}" = "true" ] && set +x;

    return ${RETURN_CODE};
}
