#==============================================================================
#
#          FILE:  logging.properties
#         USAGE:  n/a
#   DESCRIPTION:  Property file containing application resource information
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  CaspersBox Web Services
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#
#==============================================================================

#==============================================================================
# enable various items for logging. usually used in debugging during
# development, but can be used for edge cases in a production setting.
#
# LOGGER: Full path to the logging utility.
# LOG_DIR: Full path to the directory logs are written to. Variables can be used.
# ARCHIVE_DIR: The directory archive logs are written to, relative to log_root
#==============================================================================
typeset -rx LOGGER=${APP_ROOT}/${LIB_DIRECTORY}/logging/logger.sh
typeset -rx LOG_DIR=${APP_ROOT}/var/log
typeset -rx ARCHIVE_DIR=${LOG_ROOT}/archive

#==============================================================================
# enable various items for logging. usually used in debugging during
# development, but can be used for edge cases in a production setting.
#
#    ENABLE_DEBUG: true/false - if debug is on a lot of messages about runtime
#                  will get printed to the debug log
#    ENABLE_TRACE: true/false - turns on shell debug (set -x)
#==============================================================================
typeset -rx ENABLE_DEBUG=false
typeset -rx ENABLE_TRACE=false

#==============================================================================
# file rotation properties. can rotate on file size or create time. n number
# of logs will be kept in the current log directory, all others are relocated
# to the archive. if a log is eligible for rotation, and a file exists in the
# current log dir with that name, then the file with the desired name is moved
# to the archive and the file is renamed, otherwise the file is simply renamed.
#
#      ROLLOVER_PERIOD: How long should active files be kept around ?
# LOG_RETENTION_PERIOD: How many logs should we keep around ?
#      FILE_SIZE_LIMIT: How big, in KB, will we allow files to get ?
#      ARCHIVE_ENABLED: Do we keep logs in an archive ?
#==============================================================================
typeset -rx FILE_SIZE_LIMIT=10240
typeset -rx LOG_RETENTION_PERIOD=7
typeset -rx ROLLOVER_PERIOD=24
typeset -rx ARCHIVE_ENABLED=true

#==============================================================================
# conversion pattern. based off log4j. using log4j items in the conversion
#
#       CONVERSION_PATTERN: How should we translate and present information ?
# The conversion pattern goes like this:
# %d - date/time
# %t - thread
# %c - log file
# %l - log level
# %F - source file
# %L - line number
# %m - message
#             DATE_PATTERN: Date pattern for log files
#                           - LOG_NAME.DATE_PATTERN
#==============================================================================
typeset -rx CONVERSION_PATTERN="[Time: %d %m %Y %H:%M:%S,%N][Thread: %t][Log: %c][Level: %-5p] - [File: %F:%L] - %m"
typeset -rx DATE_PATTERN=$(date +"%Y-%m-%d")

## Define the log file names
typeset -rx ERROR_LOG_FILE=${LOG_DIR}/error.${DATE_PATTERN}.log
typeset -rx DEBUG_LOG_FILE=${LOG_DIR}/debug.log.${DATE_PATTERN}.log
typeset -rx AUDIT_LOG_FILE=${LOG_DIR}/audit.log.${DATE_PATTERN}.log
typeset -rx WARN_LOG_FILE=${LOG_DIR}/warn.log.${DATE_PATTERN}.log
typeset -rx INFO_LOG_FILE=${LOG_DIR}/info.log.${DATE_PATTERN}.log
